# @package _global_

# specify here default training configuration
# Each value yaml file will be searched in the key config folder, e.g. configs/model/mlp.yaml (the yaml ending is optional)
# NOTE: Configs can only override stuff that appears *before it* in the defaults list.
defaults:
  - _self_
  - trainer: default.yaml
  - model: mlp.yaml
  - datamodule: icosahedron.yaml

  - callbacks: wandb.yaml  # or use default.yaml
  - logger: wandb.yaml     # set logger here or use command line (e.g. `python train.py logger=wandb`)

  # modes are special collections of config options for different purposes, e.g. debugging
  - mode: default.yaml

  # optional local config for machine/user specific settings (e.g. data dir)
  - optional local: default.yaml

  # experiment configs allow for version control of specific configurations
  # for example, use the# hyperparameter optimization (null means no optimization)m to store best hyperparameters for each combination of model and datamodule
  - experiment: null
  # Hyperparameter optimization (null means no optimization)
  - optuna: null

  # default optimizer is AdamW (better than Adam with weight decay)
  - override optimizer@model.optimizer: adamw.yaml


# Note: hydra.runtime.cwd points to the original working dir.

# ${hydra:runtime.cwd} is the path to original working directory
# hydra hijacks working directory by changing it to the new log directory so it's useful to have this path as a special variable
# https://hydra.cc/docs/next/tutorials/basic/running_your_app/working_directory
work_dir: ./out_dir       # ${hydra:runtime.cwd}  # oc.env allows to get environment variable

# path to checkpoints
ckpt_dir: ${work_dir}/checkpoints/

# path for logging
log_dir: ${work_dir}/logs/

# pretty print config at the start of the run using Rich library
print_config: True

# disable python warnings if they annoy you
ignore_warnings: True

# evaluate on test set, using best model weights achieved during training
# lightning chooses best weights based on metric specified in checkpoint callback
test_after_training: False

# Upload config file to wandb cloud?
save_config_to_wandb: True

# Verbose?
verbose: True

# Global seed for random number generators in pytorch, numpy and python.random for reproducibility
# Note: It does *not* apply to the data split, which is done based on the random seed specified in the datamodule
seed: 11

# name of the run, should be used along with experiment mode
name: null
