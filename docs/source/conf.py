# Configuration file for the Sphinx documentation builder.
import os
import ast
import importlib
import inspect
import types
import warnings
from typing import Dict, Any
from git.repo.base import Repo

import sphinx as sphinx

import aibedo
log = sphinx.util.logging.getLogger(__name__)

# -- Project information

project = 'AIBEDO'
copyright = '2021, Ramea'
author = 'Ramea'

release = '0.1'
version = '0.1.0'

# -- General configuration
# If your documentation needs a minimal Sphinx version, state it here.
#
needs_sphinx = '3.1.2'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',  #
    'sphinx.ext.autosummary',  #
    'sphinx.ext.extlinks',
    'sphinx.ext.coverage',  #
    'sphinx.ext.napoleon',  #
    'sphinxcontrib.katex',
    'sphinx.ext.linkcode',
    'sphinx.ext.intersphinx',  #
    'sphinxext.opengraph',
    'sphinx_copybutton',
    'myst_parser',  #
    'sphinxarg.ext',
    'sphinx.ext.doctest',  #
    'sphinx_panels',
    'sphinxcontrib.images',
    'nbsphinx',  #
   # "sphinx.ext.imgmath",
]
extensions_OLD = [
    "sphinx.ext.todo",
    "sphinx.ext.viewcode",
    "sphinx.ext.imgmath",
    "sphinx.ext.autosectionlabel",
    "sphinx_autodoc_typehints",
    "sphinx_copybutton",
    "sphinx_paramlinks",
    "sphinx_togglebutton",
]

"""extensions = [
    'sphinx.ext.duration',
    'sphinx.ext.doctest',
    'sphinx.ext.autodoc',
    'sphinx.ext.autosummary',
    'sphinx.ext.intersphinx',
]"""

def _get_commit_sha() -> str:
    """Determines the commit sha.
    Returns:
        str: The git commit sha, as a string.
    """
    repo_root = os.path.join(os.path.dirname(__file__), '..', '..')
    repo = Repo(repo_root)
    if repo.is_dirty():
        warning_msg = 'The git repo is dirty. The commit sha for source code links will be incorrect.'
        if os.environ.get('CI', '0') == '0':
            # If developing locally, warn.
            warnings.warn(warning_msg)
        else:
            # If on CI, error.
            raise RuntimeError(warning_msg)
    _commit_sha = repo.commit().hexsha
    return _commit_sha


_COMMIT_SHA = _get_commit_sha()

# Don't show notebook output in the docs
nbsphinx_execute = 'never'

notebook_path = 'kramea/aibedo/blob/' + _COMMIT_SHA + '/{{ env.doc2path(env.docname, base=None) }}'

# Include an "Open in Colab" link at the beginning of all notebooks
nbsphinx_prolog = f"""
.. tip::
    This tutorial is available as a `Jupyter notebook <https://github.com/{notebook_path}>`_.
    ..  image:: https://colab.research.google.com/assets/colab-badge.svg
        :target: https://colab.research.google.com/github/{notebook_path}
        :alt: Open in Colab
"""

intersphinx_mapping = {
    'python': ('https://docs.python.org/3/', None),
    'sphinx': ('https://www.sphinx-doc.org/en/master/', None),
    'numpy': ('https://numpy.org/doc/stable', None),
}
intersphinx_disabled_domains = ['std']

napoleon_use_ivar = True
napoleon_custom_sections = [('Returns', 'params_style')]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']


# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ['.rst', '.md']
# -- Options for HTML output

html_theme = 'furo'
#html_theme = 'pytorch_sphinx_theme'
#html_theme_path = [pytorch_sphinx_theme.get_html_theme_path()]
# -- Options for EPUB output
epub_show_urls = 'footnote'

# -*- coding: utf-8 -*-
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
from os import path
import re
# import sys
import pkgutil

import pytorch_sphinx_theme

# -- General configuration ------------------------------------------------



# build the templated autosummary files
autosummary_generate = True
numpydoc_show_class_members = False

# Theme has bootstrap already
panels_add_bootstrap_css = False

# autosectionlabel throws warnings if section names are duplicated.
# The following tells autosectionlabel to not throw a warning for
# duplicated section names that are in different documents.
autosectionlabel_prefix_document = True

# katex options
katex_prerender = True



# The master toctree document.
master_doc = 'index'


# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# Disable docstring inheritance
autodoc_inherit_docstrings = False

# Disable displaying type annotations, these can be very verbose
autodoc_typehints = 'none'

# Enable overriding of function signatures in the first line of the docstring.
autodoc_docstring_signature = True

# -- katex javascript in header
#
#    def setup(app):
#    app.add_javascript("https://cdn.jsdelivr.net/npm/katex@0.10.0-beta/dist/katex.min.js")


# -- Options for HTML output ----------------------------------------------
#
# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
#
#



# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.

html_theme_options = {
    #'pytorch_project': 'docs',
    #'canonical_url': 'https://pytorch.org/docs/stable/',
    'collapse_navigation': False,
    'display_version': True,
    'logo_only': True,
   # 'analytics_id': 'UA-117752657-2',
}


# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']

html_css_files = [
    'css/jit.css',
]



# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'AIBEDO', 'AIBEDO Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'AIBEDO', 'AIBEDO Documentation',
     author, 'AIBEDO', 'One line description of project.',
     'Miscellaneous'),
]


# -- A patch that prevents Sphinx from cross-referencing ivar tags -------
# See http://stackoverflow.com/a/41184353/3343043

from docutils import nodes
from sphinx.util.docfields import TypedField
from sphinx import addnodes
import sphinx.ext.doctest

# Without this, doctest adds any example with a `>>>` as a test
doctest_test_doctest_blocks = ''
doctest_default_flags = sphinx.ext.doctest.doctest.ELLIPSIS
doctest_global_setup = '''
import aibedo
'''


def patched_make_field(self, types, domain, items, **kw):
    # `kw` catches `env=None` needed for newer sphinx while maintaining
    #  backwards compatibility when passed along further down!

    # type: (List, unicode, Tuple) -> nodes.field
    def handle_item(fieldarg, content):
        par = nodes.paragraph()
        par += addnodes.literal_strong('', fieldarg)  # Patch: this line added
        # par.extend(self.make_xrefs(self.rolename, domain, fieldarg,
        #                           addnodes.literal_strong))
        if fieldarg in types:
            par += nodes.Text(' (')
            # NOTE: using .pop() here to prevent a single type node to be
            # inserted twice into the doctree, which leads to
            # inconsistencies later when references are resolved
            fieldtype = types.pop(fieldarg)
            if len(fieldtype) == 1 and isinstance(fieldtype[0], nodes.Text):
                typename = fieldtype[0].astext()
                builtin_types = ['int', 'long', 'float', 'bool', 'type']
                for builtin_type in builtin_types:
                    pattern = fr'(?<![\w.]){builtin_type}(?![\w.])'
                    repl = f'python:{builtin_type}'
                    typename = re.sub(pattern, repl, typename)
                par.extend(self.make_xrefs(self.typerolename, domain, typename,
                                           addnodes.literal_emphasis, **kw))
            else:
                par += fieldtype
            par += nodes.Text(')')
        par += nodes.Text(' -- ')
        par += content
        return par

    fieldname = nodes.field_name('', self.label)
    if len(items) == 1 and self.can_collapse:
        fieldarg, content = items[0]
        bodynode = handle_item(fieldarg, content)
    else:
        bodynode = self.list_type()
        for fieldarg, content in items:
            bodynode += nodes.list_item('', handle_item(fieldarg, content))
    fieldbody = nodes.field_body('', bodynode)
    return nodes.field('', fieldname, fieldbody)

TypedField.make_field = patched_make_field

copybutton_prompt_text = r'>>> |\.\.\. '
copybutton_prompt_is_regexp = True




############ from mosaicML


def _recursive_getattr(obj: Any, path: str):
    parts = path.split('.')
    try:
        obj = getattr(obj, parts[0])
    except AttributeError:
        return None
    path = '.'.join(parts[1:])
    if path == '':
        return obj
    else:
        return _recursive_getattr(obj, path)

def _determine_lineno_of_attribute(module: types.ModuleType, attribute: str):
    # inspect.getsource() does not work with module-level attributes
    # instead, parse the module manually using ast, and determine where
    # the expression was defined
    source = inspect.getsource(module)
    filename = inspect.getsourcefile(module)
    assert filename is not None, f'filename for module {module} could not be found'
    ast_tree = ast.parse(source, filename)
    for stmt in ast_tree.body:
        if isinstance(stmt, ast.Assign):
            if any(isinstance(x, ast.Name) and x.id == attribute for x in stmt.targets):
                return stmt.lineno
    return None



def linkcode_resolve(domain: str, info: Dict[str, str]):
    """Adds links to the GitHub source code in the API Reference."""
    assert domain == 'py', f'unsupported domain: {domain}'
    module_name = info['module']

    # Get the object and determine the line number
    obj_name_in_module = info['fullname']
    module = importlib.import_module(module_name)
    lineno = _determine_lineno_of_attribute(module, obj_name_in_module)
    if lineno is None:
        obj = _recursive_getattr(module, obj_name_in_module)
        if isinstance(obj, property):
            # For properties, return the getter, where it is documented
            obj = obj.fget
        try:
            _, lineno = inspect.getsourcelines(obj)
        except TypeError:
            # `inspect.getsourcelines` does not work on all object types (e.g. attributes).
            # If it fails, it still might be possible to determine the source line through better parsing
            # in _determine_lineno_of_attribute
            pass
    if lineno is None:
        log.debug(f'Could not determine source line number for {module_name}.{obj_name_in_module}.')
        return None
    # Format the link
    filename = module_name.replace('.', '/')
    commit_sha = _COMMIT_SHA
    return f'https://github.com/kramea/aibedo/blob/{commit_sha}/{filename}.py#L{lineno}'